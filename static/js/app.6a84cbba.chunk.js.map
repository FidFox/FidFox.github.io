{"version":3,"sources":["App.js","res/happy.jpg","web-build/register-service-worker.js"],"names":["Dimensions","get","width","height","Main","props","state","remainingSecs","isActive","secs","viewCounter","this","console","log","setInterval","setState","newSecs","style","styles","container","timerText","image","source","autoStart","numberOfParticles","interval","emissionRate","particleLife","direction","spread","speed","segments","fromPosition","x","Math","round","random","y","emitter","gravity","ref","Confetti","React","PureComponent","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","button","borderWidth","borderColor","borderRadius","buttonText","fontSize","color","marginBottom","buttonReset","marginTop","buttonTextReset","position","left","top","bottom","right","confetti","duration","max","counterClockWise","colors","length","Spin","defaultProps","animatedValue","Animated","Value","children","View","transform","rotate","interpolate","inputRange","outputRange","loop","sequence","timing","toValue","useNativeDriver","start","module","exports","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error"],"mappings":"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","file":"static/js/app.6a84cbba.chunk.js","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View, Image, Dimensions, Animated, Easing } from 'react-native';\nimport image from './res/happy.jpg';\nimport { Emitter } from 'react-native-particles';\nconst { width, height } = Dimensions.get('window');\n\n\nconst formatNumber = number => `0${number}`.slice(-2);\n\nconst getRemaining = (time) => {\n    const mins = Math.floor(time / 60);\n    const secs = time - mins * 60;\n    return { mins: formatNumber(mins), secs: formatNumber(secs) };\n}\n\nclass Main extends React.PureComponent {\n  constructor(props){\n    super(props);\n    this.state = {\n      remainingSecs: 0,\n      isActive: true,\n      secs: 2,\n      viewCounter: true,\n    }\n  }\n\n  componentDidMount() {\n    let interval = null;\n    const {isActive, remainingSecs} = this.state;\n    console.log(isActive)\n    if (isActive) {\n      interval = setInterval(() => {\n        this.setState((state, props) => {\n          const newSecs = state.secs - 1;\n          const isActive = newSecs === 0;\n          if(newSecs === 0) return{...state, viewCounter: false}\n          return {...state, secs: newSecs, isActive};\n        });\n      }, 1000);\n    }\n  }\n\n  render() {\n    const {secs, viewCounter} = this.state;\n    return (\n      <View style={styles.container}>\n        {\n          viewCounter ? \n          <Text style={styles.timerText}>{`${secs}`}</Text> :\n          <View>\n            <Image\n                style={styles.image}\n                source={image}\n              />\n              <Emitter\n                autoStart={true}\n                numberOfParticles={200}\n                interval={100}\n                emissionRate={10}\n                particleLife={10000}\n                direction={90}\n                spread={120}\n                speed={10}\n                segments={60}\n                width={width}\n                height={height}\n                fromPosition={() => ({ x: Math.round(Math.random() * width), y: 0 })}\n                style={styles.emitter}\n                gravity={0.3}\n                ref={emitter => (this.emitter = emitter)}\n              >\n                <Confetti />\n            </Emitter>\n\n          </View>\n        }\n      </View>\n  );\n}\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    width: width,\n    height: height,\n    backgroundColor: '#07121B',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  image: {\n    width: width,\n    height: height,\n  },\n  button: {\n      borderWidth: 10,\n      borderColor: '#B9AAFF',\n      width: width / 2,\n      height: height / 2,\n      borderRadius: width / 2,\n      alignItems: 'center',\n      justifyContent: 'center'\n  },\n  buttonText: {\n      fontSize: 45,\n      color: '#B9AAFF'\n  },\n  timerText: {\n      color: '#fff',\n      fontSize: 90,\n      marginBottom: 20\n  },\n  buttonReset: {\n      marginTop: 20,\n      borderColor: \"#FF851B\"\n  },\n  buttonTextReset: {\n    color: \"#FF851B\"\n  },\n  emitter: {\n    position: 'absolute',\n    left: 0,\n    top: -10,\n    bottom: 0,\n    right: 0\n  },\n  confetti: {\n    width: 4,\n    height: 8,\n    backgroundColor: 'red'\n  }\n});\n\nclass Confetti extends React.PureComponent {\n  static defaultProps = {\n    colors: ['red', 'blue', 'yellow', 'blue']\n  };\n\n  constructor(props) {\n    super(props);\n    const random = Math.random();\n    this.duration = Math.max(random * 10000, 5000);\n    this.counterClockWise = random > 0.5;\n    this.color =\n      props.colors[Math.round((random * 10) % (props.colors.length - 1))];\n  }\n\n  render() {\n    return (\n      <Spin duration={this.duration} counterClockWise={this.counterClockWise}>\n        <View style={[styles.confetti, { backgroundColor: this.color }]} />\n      </Spin>\n    );\n  }\n}\n\nclass Spin extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      animatedValue: new Animated.Value(0)\n    };\n  }\n  render() {\n    const { children, counterClockWise } = this.props;\n    return (\n      <Animated.View\n        style={{\n          transform: [\n            {\n              rotate: this.state.animatedValue.interpolate({\n                inputRange: [0, 1],\n                outputRange: counterClockWise\n                  ? ['0deg', '360deg']\n                  : ['360deg', '0deg']\n              })\n            }\n          ]\n        }}\n      >\n        {children}\n      </Animated.View>\n    );\n  }\n\n  componentDidMount() {\n    const { animatedValue } = this.state;\n    Animated.loop(\n      Animated.sequence([\n        Animated.timing(animatedValue, {\n          toValue: 1,\n          duration: this.props.duration,\n          useNativeDriver: true\n        }),\n        Animated.timing(animatedValue, {\n          toValue: 0,\n          duration: 0,\n          useNativeDriver: true\n        })\n      ])\n    ).start();\n  }\n}\nexport default Main;","module.exports = __webpack_public_path__ + \"static/media/happy.3388c959.jpg\";","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}